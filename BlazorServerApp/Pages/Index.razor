@page "/"
@using BlazorServerApp.Enum
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavManager
@implements IAsyncDisposable

<div class="form-group">
    <label>User: <input @bind = "userInput" @onkeyup = "UpdateState" @oninput = "UpdateState"></input></label>
</div>
<div class="form-group">
    <label>Message: <input @bind = "messageInput" @onkeyup = "UpdateState" @oninput = "UpdateState"></input></label>
</div>
<button @onclick = "Send" disabled = "@(CanSend == false)">Send</button>
<hr/>
<ul>
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>
@code{
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, string>(nameof(Message.ReceiveMessage), (user, message) =>
        {
            var forrmattedMessage = $"{user}: {message}";
            messages.Add(forrmattedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
    }

    private void UpdateState(KeyboardEventArgs args) => InvokeAsync(StateHasChanged);

    private void UpdateState(ChangeEventArgs args) => InvokeAsync(StateHasChanged);

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public bool CanSend => IsConnected && !string.IsNullOrEmpty(userInput) && !string.IsNullOrWhiteSpace(messageInput);

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}
